NUMA (Non-Uniform Memory Access) 최적화는 멀티소켓 CPU 시스템에서 성능을 극대화하기 위한 전략


🎯 4. 기대 효과
✅ 메모리 접근 지연 최소화 → CPU와 같은 노드 메모리를 사용하므로 빠름
✅ 캐시 로컬리티 향상 → 캐시 히트율 증가
✅ 프로세스 간 간섭 감소 → 다른 노드 메모리 접근 안 하므로 병목 줄어듦





🎯 1. NUMA 구조란?
👉 기존 SMP (Symmetric Multiprocessing) 시스템은 모든 CPU가 하나의 메모리 영역을 공유합니다.
👉 NUMA 시스템은 여러 CPU 소켓이 각각 **"자기 전용 메모리 뱅크 (노드)"**를 가지며, 다른 노드의 메모리에 접근할 수도 있지만 속도가 느려집니다.

📌 예제 구조 (듀얼 소켓 서버)
Node 0: CPU 0, CPU 1 → 메모리 뱅크 0
Node 1: CPU 2, CPU 3 → 메모리 뱅크 1
각 노드는 자기가 가진 메모리에 빠르게 접근하지만, 다른 노드의 메모리는 지연시간 (Latency) 이 발생합니다.

🎯 2. NUMA 최적화의 목표
✅ 목표: "프로세스의 CPU와 메모리를 같은 노드에 묶어서 (local node) 속도를 빠르게 유지"

예제 상황:
프로세스 A가 Node 0의 CPU 0에서 실행 → Node 0의 메모리를 사용하는 게 빠름
만약 Node 1의 메모리를 접근하면 → 원격 메모리 접근 (remote access) 때문에 성능 저하

🎯 3. NUMA 최적화 방법
📌 (1) NUMA 노드 정보 확인 명령어
numactl --hardware
👉 각 노드와 CPU 배치 정보를 보여줍니다.

예제 출력:
available: 2 nodes (0-1)
node 0 cpus: 0 1
node 1 cpus: 2 3


📌 (2) numactl 명령어로 프로세스 할당
프로세스를 특정 NUMA 노드에 띄우려면:
numactl --cpunodebind=0 --membind=0 ./my_program
✅ --cpunodebind=0: Node 0의 CPU만 사용
✅ --membind=0: Node 0의 메모리만 사용



📌 (3) C 코드에서 NUMA 최적화하기
#define _GNU_SOURCE
#include <numa.h>
#include <sched.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main() {
    // NUMA 지원 확인
    if (numa_available() == -1) {
        printf("NUMA not supported\n");
        return 1;
    }

    int cpu_count = sysconf(_SC_NPROCESSORS_ONLN);
    int node_count = numa_max_node() + 1;

    printf("CPU Cores: %d, NUMA Nodes: %d\n", cpu_count, node_count);

    for (int i = 0; i < 4; i++) {
        pid_t pid = fork();

        if (pid < 0) {
            perror("fork failed");
            exit(1);
        }

        if (pid == 0) {  // Child process
            int node = i % node_count;  // 노드 순환 할당
            cpu_set_t mask;

            CPU_ZERO(&mask);
            CPU_SET(i % cpu_count, &mask);

            if (sched_setaffinity(0, sizeof(mask), &mask) == -1) {
                perror("sched_setaffinity");
                exit(1);
            }

            // NUMA 메모리 바인딩
            struct bitmask *bm = numa_allocate_nodemask();
            numa_bitmask_setbit(bm, node);
            numa_set_membind(bm);
            numa_free_nodemask(bm);

            printf("Child %d (PID: %d) assigned to Node %d, CPU %d\n", i, getpid(), node, i % cpu_count);

            while (1) {
                printf("Child %d running on Node %d, CPU %d\n", i, node, i % cpu_count);
                sleep(1);
            }

            exit(0);
        }
    }

    // Parent process waits
    for (int i = 0; i < 4; i++) {
        wait(NULL);
    }

    return 0;
}
