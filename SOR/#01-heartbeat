heartbeat을 인자를 넣어 처리

heartbeat를 이용하는 이용자 입장에서는 qot server의 수를 알고 있어야한다.


typedef enum {
    API_LOCAL, API_REMOTE
} SVR_LIST;

typedef enum {
    SVR_1=0, SVR_2
} SVR_LIST;

typedef struct {
    API_MODE api_mode;
    SVR_LIST active_svr;
    int ecode;
    union {
        void *p_local;
        void *p_remote[2];
    } svr
} QOT;



세션 관련 내용 재현님이 잘 정리해주셨습니다
저희한테 모두 해당되는 내용은 아니지만 공통 관리를 위해서 단일세션 구조로 간다고 하셨고,
크게 문제되는 이견은 없어서 저희도 준비해서 반영하려고 합니다

반영 일정
4월 코스콤 통합테스트
5월 회원사 테스트
5월 말까지 라이브 반영

멀티세션 핸들하던 방식
pod 기동 시 커넥션풀 10개 각 커넥션 1st, 2nd 세션 맺음
1st 무너지면 2nd failover
2nd 무너지면 1st failover
2nd heartbeat 불가능하므로 pod 기동 시점처럼 1st, 2nd 멀티세션 유지 불가

통합시세 장비 프로세스 재기동 작업이 아니면 failover 없었고 항상 1st 세션으로만 서비스
단일세션으로 바뀌면
heartbeat 통해서 커넥션에서 단일세션임에도 reconnect 잘하는지 failover 테스트 진행
단일세션이 실제 어느 장비랑 세션 맺었는지 log 로 추적 및 모니터링 가능



# 기존 멀티세션 유지
1st, 2nd 접속 후 시작
1st 장애 -> 2nd 동작
2nd 장애 -> fail
1st, 2nd 기동후 reopen 후 서비스가능

# heartbeat 함수 제공


