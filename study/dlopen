#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dlfcn.h>

#define MAX_MODULES 100

typedef struct {
    void* handle;
    char so_name[256];
    char version[64];
} Module;

Module module_cache[MAX_MODULES];
int module_count = 0;

void* load_shared_object(const char* so_path, const char* version) {
    for (int i = 0; i < module_count; i++) {
        if (strcmp(module_cache[i].so_name, so_path) == 0 &&
            strcmp(module_cache[i].version, version) == 0) {
            printf("[INFO] Reusing loaded module: %s (version: %s)\n", so_path, version);
            return module_cache[i].handle;
        }
    }

    void* handle = dlopen(so_path, RTLD_LAZY);
    if (!handle) {
        fprintf(stderr, "[ERROR] dlopen failed: %s\n", dlerror());
        return NULL;
    }

    if (module_count >= MAX_MODULES) {
        fprintf(stderr, "[ERROR] Module cache full.\n");
        dlclose(handle);
        return NULL;
    }

    strncpy(module_cache[module_count].so_name, so_path, sizeof(module_cache[module_count].so_name) - 1);
    strncpy(module_cache[module_count].version, version, sizeof(module_cache[module_count].version) - 1);
    module_cache[module_count].handle = handle;
    module_count++;

    printf("[INFO] Loaded new module: %s (version: %s)\n", so_path, version);
    return handle;
}

void unload_all_modules() {
    for (int i = 0; i < module_count; i++) {
        if (module_cache[i].handle) {
            dlclose(module_cache[i].handle);
            module_cache[i].handle = NULL;
        }
    }
    module_count = 0;
}

typedef void (*hello_func_t)(void);

int main() {
    const char* lib_path = "./libhello.so";
    const char* version1 = "1.0.0";

    void* handle1 = load_shared_object(lib_path, version1);
    if (!handle1) return 1;

    hello_func_t hello1 = (hello_func_t)dlsym(handle1, "hello");
    if (hello1) hello1();

    // Try loading same library with same version again
    void* handle2 = load_shared_object(lib_path, version1);
    hello_func_t hello2 = (hello_func_t)dlsym(handle2, "hello");
    if (hello2) hello2();

    unload_all_modules();
    return 0;
}



