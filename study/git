workging directory
staging area
repository

# commands
git branch
git status
git remote -v
git log -a
git log --graph 
git log --graph --all
git show <commit hash> # 커밋에 어떤 변경이 있었는지 직접 확인
git diff --staged        # diff HEAD-commit and staged
git diff HEAD^ HEAD      # 마지막 커밋이 실제로 뭔가 적용됐는지 확인1
git diff <커밋해시> HEAD # 마지막 커밋이 실제로 뭔가 적용됐는지 확인2


#rename
git branch -m <new-branch-name>
git branch -m <old-branch-name> <new-branch-name>


# 되돌리는 방법
git reset login.hash     # cancel staging, local 에서만 작업. or 혼자.
git restore; push 이후
git revert; push 한 이후. step down


# job
git pull origin release
git switch -c feature/#1-login
// job
git add . or (files)
git commit -m "message"
git push origin feature/#1-login

# delete local branch 
git branch -d feature/#1-login

# restore
git restore --source=<commit hash to restore to> --worktree -- .

# procedure for renaming a function in a merged branch and merge it again.
git checkout feature/login
// job
git add # 현재 feature에 필요한 파일만 add하고 commit 한다. 기능적으로 다른 feature면 따로 add, commit 한다.
git commit -m "message"
git push origin fearure/login
mr in at web page (must select target branch(ex. release))
git switch release
git pull origin release

# git rebase ; 조금 더 "깨끗한 히스토리"를 만들고 싶을 때 유용
# B 브랜치의 커밋들을 release 브랜치 위에 다시 얹는(rebase) 방식으로 사용
git switch feature/login
git rebase --onto release <B-기준-포인트> B # <B-기준-포인트>는 B 브랜치를 만들었던 기준 커밋 (예: release에서 분기한 시점)
ex. git rebase --onto release 1234abcd B
git checkout release
git merge B   # Fast-forward merge 가능



# git reset rebase
git reflog
6b1sdv HEAD@{0}: rebase finish
6b1sdv HEAD@{1}: rebase start
4a4sd3 HEAD@{2}: checkout...
git reset --hard 4a4sd3  or  git reset --hard HEAD@{2}


# git stash
git stash pop
git stash clear


# 과거 commit으로 restore하여 특정 브랜치의 병합이 빠졌있는 상태 해결 방법
방법1. 브랜치를 새 브랜치로 새로 따서 merge
git switch B
git switch -c B_reapply
git switch release
git merge B_reapply

방법2. 
git switch B
git log --oneline      # B 브랜치 커밋 확인
git switch release
git cherry-pick <커밋해시>   # 원하는 커밋 하나씩 적용


방법3.
git switch B           # cherrypick 대상 branch로 이동
git log --oneline      # B 브랜치 commit hash 확인
git switch release
git switch -c feature/#5-something
git cherry-pick <커밋해시>
git add .
git commit 
git push feature/#5-something
MR/PR



# feature 작업중 작업을 stash하고 release에서 cherry-pick 을하고 release_pb 기준으로 feature을 맞춘다음 stash pop - BEGIN
git switch feature
git stash

git switch release
git pull origin release

git switch release_pb
git cherry-pick 

git push origin release_pb

git switch feature
git rebase release_pb # cherry-pick한 release_pb 기준으로 레벨을 맞춰줌

git stash pop
# feature 작업중 작업을 stash하고 release에서 cherry-pick 을하고 release_pb 기준으로 feature을 맞춘다음 stash pop -  END


# 브랜치 내에서 특정 commit-hash 으로 이동해서 확인작업 후 다시 원래 commit-hash로 돌아가는 방법
git switch <commit-hash>
작업
git switch -



# rs 브랜치의 release - commit을 가져오는 방법
1. 가져오려는 브랜치의 이름을 확인
git branch -a
> remotes/origin/release

2. 가져오려는 commit 확인
git log remotes/origin/release

3. 가져오려는 commit이 없으면 local에 remote 정보를 업데이트
git fetch origin 

4. 가져오려는 commit 다시 확인
git log remotes/origin/release

5. 확인이 되면 feature branch 추가 후 cherry-pick 진행
관리페이지에서 feature 번호 확인후 채번
git switch -c feature/#12-kproc-fix
git cherry-pick <commit-hash>

6. commit 확인
git log

7. feature push
git push origin feature/#12-kproc-fix

8. git log 확인

9. 관리페이지에서 mr -> release_pb 진행

10. feature pull

11. switch release_pb -> pull

12. 반영 확인




# 특정브랜치로부터 파일 가져오기
~/ats/cmd> git restore --source=remotes/origin/release kmon.sh


# 현재 브랜치의 HEAD 파일 가져오기
~/ats/cmd> git restore kmon.sh

